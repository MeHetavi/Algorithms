import numpy as np
def multiply_Matrix_Normally(a:list[list],b:list[list]) -> list[list]:
    c = []
    for i in range(len(a)):
        c.append([])
        for x in range(len(b[0])):  
            ans = 0
            for j in range(len(b)):
                ans += a[i][j] * b[j][x]
            c[i] += [ans]
    return c

def divide_And_Conquer_Matrix_Multiplication(a,b):
    def Multiply_Matrix_Normally(a:list[list],b:list[list]) -> list[list]:
        c = []
        for i in range(len(a)):
            c.append([])
            for x in range(len(b[0])):  
                ans = 0
                for j in range(len(b)):
                    ans += a[i][j] * b[j][x]
                c[i] += [ans]
        return c


    def divide(a):
        col_mid = len(a[0])//2
        row_mid = len(a)//2
        a1=[]
        a2=[]
        a3=[]
        a4=[]
        for row in range(row_mid):
            a1.append(a[row][:col_mid])
        for row in range(row_mid):
            a2.append(a[row][col_mid:])
        for row in range(row_mid,len(a)):
            a3.append(a[row][:col_mid])
        for row in range(row_mid,len(a)):
            a4.append(a[row][col_mid:])
        return a1,a2,a3,a4

    def add_Matrices(a,b):
        for row in range(len(a)):
            for col in range(len(a[0])):
                a[row][col] = a[row][col] + b[row][col]
        return a

    def main(a,b):
        if len(a) <= 4 or len(b)<=4 :
            return Multiply_Matrix_Normally(a,b)
        else:
            a1,a2,a3,a4 = divide(a)
            b1,b2,b3,b4 = divide(b)
        
            c1 = add_Matrices(Multiply_Matrix_Normally(a1,b1),Multiply_Matrix_Normally(a2,b3))
            c2 = add_Matrices(Multiply_Matrix_Normally(a2,b2),Multiply_Matrix_Normally(a1,b4))
            c3 = add_Matrices(Multiply_Matrix_Normally(a3,b3),Multiply_Matrix_Normally(a4,b1))
            c4 = add_Matrices(Multiply_Matrix_Normally(a4,b4),Multiply_Matrix_Normally(a3,b2))

        # for i in range(len(c1)):
        #     c1[i]+=c2[i]
        # for i in range(len(c3)):
        #     c3[i]+=c4[i]
        # return c1+c3

        return np.vstack((np.hstack((c1,c2)),np.hstack((c3,c4))))

    print(main(a,b))
